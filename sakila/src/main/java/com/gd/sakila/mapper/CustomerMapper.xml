<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.CustomerMapper">

	<!-- 대여를 위한 손님목록 -->
	<select id="selectCustomerListByPhone" resultType="java.util.Map" parameterType="String">
		SELECT 
			ID customerId,
			name name,
			phone phone
		FROM customer_list
		<where>
			<if test="!phone.equals('')">
				AND phone LIKE CONCAT('%',#{phone} ,'%')
			</if>
		</where>
	</select>
	
	<!-- 손님추가 -->
	<insert id="insertCustomer" parameterType="com.gd.sakila.vo.Customer">
	
		<selectKey order="AFTER" keyProperty="customerId" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO customer(store_id, first_name, last_name, email, address_id, active)
			VALUES(#{storeId}, UPPER(#{firstName}), UPPER(#{lastName}), #{email}, #{addressId}, 1)
	</insert>

	<!-- 대여 리스트 -->
	<select id="selectRentalListByCustomer" resultType="java.util.Map" parameterType="int">
		SELECT 
				i.store_id storeId,
				DATE(r.rental_date) rentalDate, 
				DATE(r.return_date) returnDate, 
				f.title title, 
				p.amount amount,
		      	case when r.return_date is NULL AND DATEDIFF(NOW(), r.rental_date)> f.rental_duration then '연체중' 
		      		when r.return_date IS NULL then '대여중' 
		      		ELSE '반납완료' END 'state' 
		FROM rental r, payment p, film f, inventory i
		WHERE p.rental_id = r.rental_id 
		       AND r.inventory_id = i.inventory_id 
		      AND i.film_id = f.film_id
		      AND r.customer_id = #{customerId}
		ORDER BY r.rental_date DESC
	</select>
	
	<!-- 고객 상세보기 -->
	<select id="selectCustomerOne" resultType="java.util.Map" parameterType="int">
		SELECT
		   c.customer_id customerId,
		   c.store_id storeId,
		   c.email email,
		   DATE(c.create_date) createDate,
		   c.active active,
		   cl.name name,
		   cl.address address,
		   cl.`zip code` zipCode,
		   cl.phone phone,
		   cl.city city,
		   cl.country country
		FROM customer c INNER JOIN customer_list cl
		      ON c.customer_id = cl.ID
		WHERE c.customer_id = #{customerId}
	</select>
	
	<!-- 전체 고객 수 -->
	<select id="selectCustomerTotal" resultType="int" parameterType="java.util.Map">
		SELECT COUNT(*) FROM customer_list
		<where>
			<if test="!searchName.equals('')">
				AND name LIKE CONCAT('%',#{searchName} ,'%')
			</if>
			<if test="!searchPhone.equals('')">
				AND phone LIKE CONCAT('%',#{searchPhone} ,'%')
			</if>
			<if test="!storeId.equals('')">
				AND SID = #{storeId}
			</if>
		</where>
	</select>
	
	<!--  고객 리스트 -->
	<select id="selectCustomerList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT ID customerId,
          NAME name, 
          phone phone, 
          SID storeId,
          case when ID IN(SELECT c.ID
                           FROM customer_list c 
                           INNER JOIN 
                           (SELECT  p.customer_id,   
                                    case when DATEDIFF(r.return_date, r.rental_date) &lt; rental_duration 
                                         then 'overdue' END 'overdue'
                           FROM payment p, rental r, inventory i, film f
                           WHERE p.rental_id = r.rental_id AND
                                 r.inventory_id = i.inventory_id AND
                                 i.film_id = f.film_id) t
                           ON c.ID = t.customer_id 
                           GROUP BY c.Id, overdue 
                           HAVING overdue 
                           IS NOT NULL AND COUNT(*)>15) 
                             then 'black'
                when ID IN (SELECT
                              customer_id
                              FROM payment
                              GROUP BY customer_id
                            HAVING COUNT(customer_id)>30 
                            AND SUM(amount)>150)
                           then 'vip'
          END 'blackAndVip'
       FROM customer_list
		<where>
			<if test="!searchName.equals('')">
				AND name LIKE CONCAT('%',#{searchName} ,'%')
			</if>
			<if test="!searchPhone.equals('')">
				AND phone LIKE CONCAT('%',#{searchPhone} ,'%')
			</if>
			<if test="!storeId.equals('')">
				AND SID = #{storeId}
			</if>
		</where>
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	<!-- 기간마다 고객의 액티브를 변경 -->
	<!-- 
		UPDATE customer set active = 0
		WHERE customer_id IN(SELECT customer_id FROM rental GROUP BY customer_id
							HAVING DATEDIFF(NOW(), MAX(rental_date))>365)
	 -->
	<update id="updateCustomerActiveByscheduler">						
		UPDATE customer c, 
			(SELECT customer_id, max(rental_date), DATEDIFF(NOW(), max(rental_date))
             FROM rental
             GROUP BY customer_id
             HAVING DATEDIFF(NOW(), max(rental_date)) > 365) A
		SET c.active = 0
		WHERE c.customer_id = A.customer_id
	</update>
</mapper>