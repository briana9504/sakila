<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">

	<!-- 베스트 셀러 목록 -->
	<select id="selectBestSellers" resultType="java.util.Map">
		SELECT 
		 f.film_id filmId, 
		 f.title title,
		 SUM(p.amount) sum,
		 COUNT(*) cnt
		FROM inventory i INNER JOIN film f ON f.film_id=i.film_id
		INNER JOIN rental r ON i.inventory_id = r.inventory_id
		INNER JOIN payment p ON p.rental_id = r.rental_id
		GROUP BY f.film_id
		ORDER BY cnt DESC
		LIMIT 10
	</select>
	
	<update id="updateFilmCategory" parameterType="java.util.Map">
		UPDATE film_category
		SET category_id = #{categoryId}
		WHERE film_id = #{filmId}
	</update>
	
	<update id="updateFilmOne" parameterType="com.gd.sakila.vo.Film">
		UPDATE film 
		SET title = #{title},
			description = #{description},
			release_year = #{releaseYear},
			language_id = #{languageId},
			original_language_id = #{originalLanguageId},
			rental_duration = #{rentalDuration},
			rental_rate = #{rentalRate},
			length = #{length},
			replacement_cost = #{replacementCost},
			rating = #{rating},
			special_features = #{specialFeatures}
		WHERE film_id = #{filmId}
	</update>

	<select id="selectFilmListByInventory" resultType="com.gd.sakila.vo.Film">
		SELECT
			film_id filmId,
			title title	
		FROM film
	</select>
	<!-- 
		나중에 배열 받을때 쓰기....
		<if test="rating != null">
			AND f.rating IN
			
			<foreach collection="rating" item="rating" open="(" close=")" separator=", ">
				#{rating}
			</foreach>
		</if>
	
	 -->
	 
	 <!-- film_actor insert -->
	 <insert id="insertFilmCategory" parameterType="java.util.Map">
		INSERT INTO film_category(
			film_id, 
			category_id
			) VALUES(
			#{filmId}, 
			#{categoryId}
			)	
	 </insert>
	 <!-- film table insert -->
	 <insert id="insertFilm" parameterType="com.gd.sakila.vo.Film">
	 	<selectKey keyProperty="filmId" resultType="int" order="AFTER" >
	 		SELECT LAST_INSERT_ID()
	 	</selectKey>
	 	INSERT 
	 		INTO film(
	 	
		 		 title, 
		 		 description, 
		 		 release_year, 
		 		 language_id, 
		 		 original_language_id, 
		 		 rental_duration, 
		 		 rental_rate, length, 
		 		 replacement_cost, 
		 		 rating, 
		 		 special_features
		 		 
	 		 ) VALUES(
	 		 	
	 		 	#{title},
	 		 	#{description},
	 		 	#{releaseYear},
	 		 	#{languageId},
	 		 	#{originalLanguageId},
	 		 	#{rentalDuration},
	 		 	#{rentalRate},
	 		 	#{length},
	 		 	#{replacementCost},
	 		 	#{rating},
	 		 	#{specialFeatures}
	 		 )
	 </insert>
	 
	 <insert id="insertFilmActors" parameterType="java.util.Map">
	 	INSERT INTO film_actor(actor_id, film_id) VALUES
	 	<foreach collection="actorId" item="actorId" separator=", ">
	 		(#{actorId}, #{filmId})
	 	</foreach>
	 </insert>
	 
	<delete id="deleteFilmActors" parameterType="int">
		DELETE FROM film_actor 
		<where>
			film_id = #{filmId}
		</where>
	</delete>
	
	<!-- 배우 추가할때 배우 목록 보기 -->
	<select id="selectFilmActorListByFilm" parameterType="int" resultType="java.util.Map">
		SELECT a.actor_id actorId, CONCAT(a.first_name,' ', a.last_name) name,
				 CASE WHEN t.actor_id IS NULL then 'X' ELSE 'O' END ck,
				 film_id filmId
		FROM actor a 
			LEFT JOIN (SELECT * FROM film_actor where film_id = #{filmId}) t 
			ON a.actor_id = t.actor_id
		ORDER BY a.first_name ASC
	</select>
	
	<!-- 영화 상세보기 -->
	<select id="selectFilmOne" parameterType="int" resultType="java.util.Map">
		SELECT 
			f.film_id filmId, f.original_language_id originalLanguageId ,YEAR(f.release_year) releaseYear, f.rental_duration rentalDuration, f.special_features specialFeatures, f.replacement_cost replacementCost,
			n.title title, n.description description, n.category category, n.price price, n.length length, n.rating rating, n.actors actors,
			l.name languageName
		FROM film f LEFT JOIN nicer_but_slower_film_list n ON f.film_id=n.FID LEFT JOIN language l ON f.language_id=l.language_id
		WHERE f.film_id = #{filmId}
	</select>

	<!-- 프로시저를 호출 -->
	<!-- Map: filmId(in), storeId(in), film(out) -->
	<select id="selectFilmInStock" parameterType="java.util.Map" statementType="CALLABLE" resultType="int">
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=INTEGER}
			)
		}
	</select>
	
	<!-- 전체 영화목록 수 구하기 -->
	<select id="selectFilmTotal" resultType="int" parameterType="java.util.Map">
		SELECT COUNT(*) 
		FROM nicer_but_slower_film_list
		<where>
			<if test="!titleAndDescription.equals('')">
				AND	(title LIKE CONCAT('%',#{titleAndDescription},'%') OR description LIKE CONCAT('%',#{titleAndDescription},'%'))
			</if>
			<if test="!searchDescription.equals('')">
				AND description LIKE CONCAT('%',#{searchDescription},'%')
			</if>
			<if test="!searchActor.equals('')">
				AND actors LIKE CONCAT('%',#{searchActor},'%')
			</if>
			
			<if test="!searchWord.equals('')">
				AND title LIKE CONCAT('%',#{searchWord},'%')	
			</if>
			
			<if test="!category.equals('all')">
				AND category = #{category}
			</if>
			
			<if test="rating.equals('teenager')">
				AND rating IN('G','PG', 'PG-13')
			</if>
			
			<if test="rating.equals('adult')">
				AND rating IN('NC-17','R')
			</if>
								
			<if test="price != null">
				AND price = #{price}
			</if>	
		</where>
	</select>
	
	
	<!-- 영화목록 구하기 -->
	<select id="selectFilmList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			FID flimId,
			title title,
			rating rating, 
			length length, 
			price price,
			category category
		FROM nicer_but_slower_film_list 
		
		<where>
			<if test="!titleAndDescription.equals('')">
				AND	(title LIKE CONCAT('%',#{titleAndDescription},'%') OR description LIKE CONCAT('%',#{titleAndDescription},'%'))
			</if>
			<if test="!searchDescription.equals('')">
				AND description LIKE CONCAT('%',#{searchDescription},'%')
			</if>
			<if test="!searchActor.equals('')">
				AND actors LIKE CONCAT('%',#{searchActor},'%')
			</if>
			
			<if test="!searchWord.equals('')">
				AND title LIKE CONCAT('%',#{searchWord},'%')	
			</if>
			
			<if test="!category.equals('all')">
				AND category = #{category}
			</if>
			
			<if test="rating.equals('teenager')">
				AND rating IN('G','PG','PG-13')
			</if>
			
			<if test="rating.equals('adult')">
				AND rating IN('NC-17','R')
			</if>
								
			<if test="price != null">
				AND price = #{price}
			</if>	
		</where>
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
</mapper>